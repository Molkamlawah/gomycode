# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rqb-Z80SevtkJ_WjubzO30MFwWlQWqXE
"""

import math

class Point3D:
    def __init__(self, x, y, z):
        self.x, self.y, self.z = x, y, z

    def __repr__(self):
        return f"({self.x}, {self.y}, {self.z})"

my_point = Point3D(1, 2, 3)
print(my_point)

class Rectangle:
    def __init__(self, length, width):
        self.length, self.width = length, width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)

my_rectangle = Rectangle(4, 3)
print("Area:", my_rectangle.area())
print("Perimeter:", my_rectangle.perimeter())

class Circle:
    def __init__(self, center_x, center_y, radius):
        self.center_x, self.center_y, self.radius = center_x, center_y, radius

    def area(self):
        return math.pi * self.radius ** 2

    def perimeter(self):
        return 2 * math.pi * self.radius

    def is_inside(self, x, y):
        return math.sqrt((x - self.center_x)**2 + (y - self.center_y)**2) <= self.radius

my_circle = Circle(0, 0, 5)
print("Area:", my_circle.area())
print("Perimeter:", my_circle.perimeter())
print("Is point (3, 4) inside the circle?", my_circle.is_inside(3, 4))

class Bank:
    def __init__(self, balance):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
        else:
            print("Insufficient funds")

my_bank = Bank(1000)
print("Initial balance:", my_bank.balance)
my_bank.deposit(500)
print("Balance after deposit:", my_bank.balance)
my_bank.withdraw(200)
print("Balance after withdrawal:", my_bank.balance)